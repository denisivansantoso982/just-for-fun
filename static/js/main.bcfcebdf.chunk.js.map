{"version":3,"sources":["components/splash.js","pages/Home.js","pages/LandingPage.js","pages/NotFound.js","components/header.js","App.js","serviceWorker.js","index.js"],"names":["Splash","className","Component","Home","state","loading","data","axios","method","baseURL","timeout","response","i","length","this","push","setState","alert","message","datas","map","item","index","key","id","title","LandingPage","params","NotFound","Header","to","App","exact","path","from","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"gUAceA,E,uKAVX,OACE,yBAAKC,UAAU,kBACb,0BAAMA,UAAU,UACd,0BAAMA,UAAU,uB,GALLC,aCkDNC,E,kDA/Cb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,SAAS,EACTC,KAAM,IAJI,E,2MAUWC,IAAM,CACzBC,OAAQ,MACRC,QAAS,8CACTC,QAAS,M,OAEX,IALIC,E,OAKKC,EAAE,EAAGA,EAAED,EAASL,KAAKO,OAAQD,IACpCE,KAAKV,MAAME,KAAKS,KAAKJ,EAASL,KAAKM,IAErCE,KAAKE,SAAS,CACZX,SAAS,I,gDAGXY,MAAM,KAAMC,S,8IAIN,IAAD,EACeJ,KAAKV,MAAtBC,EADE,EACFA,QAASC,EADP,EACOA,KACVa,EAAQb,EAAKO,OAAS,GAAKP,EAAKc,KAAI,SAACC,EAAMC,GAAP,OACtC,yBAAKrB,UAAU,YAAYsB,IAAKF,EAAKG,IACnC,uBAAGvB,UAAU,WAAWqB,EAAxB,KACA,uBAAGrB,UAAU,SAASoB,EAAKI,WAG/B,OACEpB,EAAU,kBAAC,EAAD,MACR,6BACA,wBAAIJ,UAAU,OAAd,aAEEkB,EAEF,kC,GA1CWjB,aCwCJwB,E,kDAvCb,aAAe,IAAD,8BACZ,gBACKtB,MAAQ,CACXE,KAAM,GACND,SAAS,GAJC,E,2MAUYE,IAAM,CAC1BC,OAAQ,MACRC,QAAS,8CACTC,QAAS,IACTiB,OAAQ,I,OAEV,IANIhB,E,OAMKC,EAAE,EAAGA,EAAED,EAASL,KAAKO,OAAQD,IACpCE,KAAKV,MAAME,KAAKS,KAAKJ,EAASL,KAAKM,IAErCE,KAAKE,SAAS,CACZX,SAAS,I,gDAGXY,MAAM,KAAMC,S,8IAIN,IAAD,EACeJ,KAAKV,MAAtBC,EADE,EACFA,QAASC,EADP,EACOA,KACd,OACED,EAAU,kBAAC,EAAD,MACR,yBAAKJ,UAAU,OACf,4CACA,4CAAkBK,EAAKO,a,GAlCLX,aCQX0B,E,uKARX,OACE,yBAAK3B,UAAU,OACb,mD,GAJeC,aCcR2B,E,uKAXX,OACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAM5B,UAAU,WAAW6B,GAAG,sBAA9B,SACJ,4BAAI,kBAAC,IAAD,CAAM7B,UAAU,WAAW6B,GAAG,6BAA9B,uB,GANO5B,aCuBN6B,G,6KAhBX,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,kBAChB,kBAAC,IAAD,CAAUC,KAAK,iBAAiBJ,GAAG,wBAErC,kBAAC,IAAD,CAAOG,KAAK,qBAAqBE,UAAWhC,IAC5C,kBAAC,IAAD,CAAO8B,KAAK,4BAA4BE,UAAWT,IACnD,kBAAC,IAAD,CAAOS,UAAWP,U,GAXV1B,cCIEkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMnC,c","file":"static/js/main.bcfcebdf.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Splash extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loader-wrapper\">\r\n        <span className=\"loader\">\r\n          <span className=\"loader-inner\"></span>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Splash;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Splash from '../components/splash';\r\n\r\nclass Home extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loading: true,\r\n      data: [],\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      var response = await axios({\r\n        method: 'GET',\r\n        baseURL: 'https://jsonplaceholder.typicode.com/photos',\r\n        timeout: 60000\r\n      });\r\n      for (var i=0; i<response.data.length; i++) {\r\n        this.state.data.push(response.data[i]);\r\n      }\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var {loading, data} = this.state;\r\n    var datas = data.length > 0 && data.map((item, index) => (\r\n      <div className=\"list-data\" key={item.id}>\r\n        <p className=\"index\">{++index}.</p>\r\n        <p className=\"title\">{item.title}</p>\r\n      </div>\r\n    ));\r\n    return (\r\n      loading ? <Splash/>\r\n      : <div>\r\n        <h1 className=\"App\">Home Page</h1>\r\n        {\r\n          datas\r\n        }\r\n        <br/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Splash from '../components/splash';\r\n\r\nclass LandingPage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [],\r\n      loading: true\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      var response  = await axios({\r\n        method: 'GET',\r\n        baseURL: 'https://jsonplaceholder.typicode.com/photos',\r\n        timeout: 60000,\r\n        params: 1\r\n      });\r\n      for (var i=0; i<response.data.length; i++) {\r\n        this.state.data.push(response.data[i]);\r\n      }\r\n      this.setState({\r\n        loading: false\r\n      });\r\n    } catch (error) {\r\n      alert(error.message);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    var {loading, data} = this.state;\r\n    return (\r\n      loading ? <Splash/>\r\n      : <div className=\"App\">\r\n        <h1>Landing Page</h1>\r\n        <p>Data length : {data.length}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LandingPage;","import React, { Component } from 'react';\r\n\r\nclass NotFound extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>404, Not Found</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NotFound;","import React, { Component} from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nclass Header extends Component{\r\n  render(){\r\n    return(\r\n      <nav>\r\n        <ul>\r\n          <li><Link className=\"App-link\" to=\"/just-for-fun/home\">Home</Link></li>\r\n          <li><Link className=\"App-link\" to=\"/just-for-fun/landingPage\">Landing Page</Link></li>\r\n        </ul>\r\n      </nav>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Redirect, Route, Switch} from 'react-router-dom';\nimport Home from './pages/Home';\nimport LandingPage from './pages/LandingPage';\nimport NotFound from './pages/NotFound';\nimport Header from './components/header';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Header />\n        <Switch>\n          <Route exact path=\"/just-for-fun/\">\n            <Redirect from=\"/just-for-fun/\" to=\"/just-for-fun/home\" />\n          </Route>\n          <Route path=\"/just-for-fun/home\" component={Home} />\n          <Route path=\"/just-for-fun/landingPage\" component={LandingPage} />\n          <Route component={NotFound} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}